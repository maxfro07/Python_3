"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка. Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""


class NotANumberError(Exception):
    def __init__(self, text='Необходимо ввести число а не строку'):
        self.text = text

    def __str__(self):
        return self.text


def device_numbers(user_input: str) -> int:
    if user_input.isdigit():
        return int(user_input)
    else:
        raise NotANumberError


user_list = []
while True:
    request = input('Введите следующий элемент списка, если вы ничего больше не хотите добавлять, введите stop:\n')
    if request == 'stop':
        print(user_list)
        break
    else:
        try:
            device_numbers(request)
        except NotANumberError as e:
            print(e)
        else:
            user_list.append(request)
